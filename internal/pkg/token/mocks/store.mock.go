// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package tkmocks is a generated GoMock package.
package tkmocks

import (
	context "context"
	reflect "reflect"
	time "time"

	token "github.com/ogreks/meeseeks-box/internal/pkg/token"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore[T token.Type] struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder[T]
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder[T token.Type] struct {
	mock *MockStore[T]
}

// NewMockStore creates a new mock instance.
func NewMockStore[T token.Type](ctrl *gomock.Controller) *MockStore[T] {
	mock := &MockStore[T]{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore[T]) EXPECT() *MockStoreMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStore[T]) Delete(token T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder[T]) Delete(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore[T])(nil).Delete), token)
}

// Exists mocks base method.
func (m *MockStore[T]) Exists(token T) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockStoreMockRecorder[T]) Exists(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStore[T])(nil).Exists), token)
}

// Set mocks base method.
func (m *MockStore[T]) Set(token T, expiry time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", token, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder[T]) Set(token, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore[T])(nil).Set), token, expiry)
}

// Shutdown mocks base method.
func (m *MockStore[T]) Shutdown(ctx context.Context) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockStoreMockRecorder[T]) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockStore[T])(nil).Shutdown), ctx)
}
