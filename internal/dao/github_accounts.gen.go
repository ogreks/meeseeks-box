// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ogreks/meeseeks-box/internal/model"
)

func newGithubAccount(db *gorm.DB, opts ...gen.DOOption) githubAccount {
	_githubAccount := githubAccount{}

	_githubAccount.githubAccountDo.UseDB(db, opts...)
	_githubAccount.githubAccountDo.UseModel(&model.GithubAccount{})

	tableName := _githubAccount.githubAccountDo.TableName()
	_githubAccount.ALL = field.NewAsterisk(tableName)
	_githubAccount.ID = field.NewUint64(tableName, "id")
	_githubAccount.Source = field.NewInt32(tableName, "source")
	_githubAccount.Username = field.NewString(tableName, "username")
	_githubAccount.Password = field.NewString(tableName, "password")
	_githubAccount.IsTfa = field.NewBool(tableName, "is_tfa")
	_githubAccount.IsCopilot = field.NewBool(tableName, "is_copilot")
	_githubAccount.RegisterAt = field.NewTime(tableName, "register_at")
	_githubAccount.ExpireAt = field.NewTime(tableName, "expire_at")
	_githubAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_githubAccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_githubAccount.DeletedAt = field.NewTime(tableName, "deleted_at")

	_githubAccount.fillFieldMap()

	return _githubAccount
}

// githubAccount github account managers
type githubAccount struct {
	githubAccountDo

	ALL        field.Asterisk
	ID         field.Uint64
	Source     field.Int32  // 来源
	Username   field.String // 登录账户
	Password   field.String // 加密登录密码
	IsTfa      field.Bool   // 是否开启 2fa
	IsCopilot  field.Bool   // 是否开启服务
	RegisterAt field.Time   // 注册时间
	ExpireAt   field.Time   // 过期时间
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Time   // 软删除时间

	fieldMap map[string]field.Expr
}

func (g githubAccount) Table(newTableName string) *githubAccount {
	g.githubAccountDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g githubAccount) As(alias string) *githubAccount {
	g.githubAccountDo.DO = *(g.githubAccountDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *githubAccount) updateTableName(table string) *githubAccount {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint64(table, "id")
	g.Source = field.NewInt32(table, "source")
	g.Username = field.NewString(table, "username")
	g.Password = field.NewString(table, "password")
	g.IsTfa = field.NewBool(table, "is_tfa")
	g.IsCopilot = field.NewBool(table, "is_copilot")
	g.RegisterAt = field.NewTime(table, "register_at")
	g.ExpireAt = field.NewTime(table, "expire_at")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewTime(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *githubAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *githubAccount) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["source"] = g.Source
	g.fieldMap["username"] = g.Username
	g.fieldMap["password"] = g.Password
	g.fieldMap["is_tfa"] = g.IsTfa
	g.fieldMap["is_copilot"] = g.IsCopilot
	g.fieldMap["register_at"] = g.RegisterAt
	g.fieldMap["expire_at"] = g.ExpireAt
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g githubAccount) clone(db *gorm.DB) githubAccount {
	g.githubAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g githubAccount) replaceDB(db *gorm.DB) githubAccount {
	g.githubAccountDo.ReplaceDB(db)
	return g
}

type githubAccountDo struct{ gen.DO }

type IGithubAccountDo interface {
	gen.SubQuery
	Debug() IGithubAccountDo
	WithContext(ctx context.Context) IGithubAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGithubAccountDo
	WriteDB() IGithubAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGithubAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGithubAccountDo
	Not(conds ...gen.Condition) IGithubAccountDo
	Or(conds ...gen.Condition) IGithubAccountDo
	Select(conds ...field.Expr) IGithubAccountDo
	Where(conds ...gen.Condition) IGithubAccountDo
	Order(conds ...field.Expr) IGithubAccountDo
	Distinct(cols ...field.Expr) IGithubAccountDo
	Omit(cols ...field.Expr) IGithubAccountDo
	Join(table schema.Tabler, on ...field.Expr) IGithubAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGithubAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGithubAccountDo
	Group(cols ...field.Expr) IGithubAccountDo
	Having(conds ...gen.Condition) IGithubAccountDo
	Limit(limit int) IGithubAccountDo
	Offset(offset int) IGithubAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGithubAccountDo
	Unscoped() IGithubAccountDo
	Create(values ...*model.GithubAccount) error
	CreateInBatches(values []*model.GithubAccount, batchSize int) error
	Save(values ...*model.GithubAccount) error
	First() (*model.GithubAccount, error)
	Take() (*model.GithubAccount, error)
	Last() (*model.GithubAccount, error)
	Find() ([]*model.GithubAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GithubAccount, err error)
	FindInBatches(result *[]*model.GithubAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GithubAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGithubAccountDo
	Assign(attrs ...field.AssignExpr) IGithubAccountDo
	Joins(fields ...field.RelationField) IGithubAccountDo
	Preload(fields ...field.RelationField) IGithubAccountDo
	FirstOrInit() (*model.GithubAccount, error)
	FirstOrCreate() (*model.GithubAccount, error)
	FindByPage(offset int, limit int) (result []*model.GithubAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGithubAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g githubAccountDo) Debug() IGithubAccountDo {
	return g.withDO(g.DO.Debug())
}

func (g githubAccountDo) WithContext(ctx context.Context) IGithubAccountDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g githubAccountDo) ReadDB() IGithubAccountDo {
	return g.Clauses(dbresolver.Read)
}

func (g githubAccountDo) WriteDB() IGithubAccountDo {
	return g.Clauses(dbresolver.Write)
}

func (g githubAccountDo) Session(config *gorm.Session) IGithubAccountDo {
	return g.withDO(g.DO.Session(config))
}

func (g githubAccountDo) Clauses(conds ...clause.Expression) IGithubAccountDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g githubAccountDo) Returning(value interface{}, columns ...string) IGithubAccountDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g githubAccountDo) Not(conds ...gen.Condition) IGithubAccountDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g githubAccountDo) Or(conds ...gen.Condition) IGithubAccountDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g githubAccountDo) Select(conds ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g githubAccountDo) Where(conds ...gen.Condition) IGithubAccountDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g githubAccountDo) Order(conds ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g githubAccountDo) Distinct(cols ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g githubAccountDo) Omit(cols ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g githubAccountDo) Join(table schema.Tabler, on ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g githubAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g githubAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g githubAccountDo) Group(cols ...field.Expr) IGithubAccountDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g githubAccountDo) Having(conds ...gen.Condition) IGithubAccountDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g githubAccountDo) Limit(limit int) IGithubAccountDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g githubAccountDo) Offset(offset int) IGithubAccountDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g githubAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGithubAccountDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g githubAccountDo) Unscoped() IGithubAccountDo {
	return g.withDO(g.DO.Unscoped())
}

func (g githubAccountDo) Create(values ...*model.GithubAccount) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g githubAccountDo) CreateInBatches(values []*model.GithubAccount, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g githubAccountDo) Save(values ...*model.GithubAccount) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g githubAccountDo) First() (*model.GithubAccount, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAccount), nil
	}
}

func (g githubAccountDo) Take() (*model.GithubAccount, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAccount), nil
	}
}

func (g githubAccountDo) Last() (*model.GithubAccount, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAccount), nil
	}
}

func (g githubAccountDo) Find() ([]*model.GithubAccount, error) {
	result, err := g.DO.Find()
	return result.([]*model.GithubAccount), err
}

func (g githubAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GithubAccount, err error) {
	buf := make([]*model.GithubAccount, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g githubAccountDo) FindInBatches(result *[]*model.GithubAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g githubAccountDo) Attrs(attrs ...field.AssignExpr) IGithubAccountDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g githubAccountDo) Assign(attrs ...field.AssignExpr) IGithubAccountDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g githubAccountDo) Joins(fields ...field.RelationField) IGithubAccountDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g githubAccountDo) Preload(fields ...field.RelationField) IGithubAccountDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g githubAccountDo) FirstOrInit() (*model.GithubAccount, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAccount), nil
	}
}

func (g githubAccountDo) FirstOrCreate() (*model.GithubAccount, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAccount), nil
	}
}

func (g githubAccountDo) FindByPage(offset int, limit int) (result []*model.GithubAccount, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g githubAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g githubAccountDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g githubAccountDo) Delete(models ...*model.GithubAccount) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *githubAccountDo) withDO(do gen.Dao) *githubAccountDo {
	g.DO = *do.(*gen.DO)
	return g
}
