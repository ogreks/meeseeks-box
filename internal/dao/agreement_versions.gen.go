// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ogreks/meeseeks-box/internal/model"
)

func newAgreementVersion(db *gorm.DB, opts ...gen.DOOption) agreementVersion {
	_agreementVersion := agreementVersion{}

	_agreementVersion.agreementVersionDo.UseDB(db, opts...)
	_agreementVersion.agreementVersionDo.UseModel(&model.AgreementVersion{})

	tableName := _agreementVersion.agreementVersionDo.TableName()
	_agreementVersion.ALL = field.NewAsterisk(tableName)
	_agreementVersion.ID = field.NewInt64(tableName, "id")
	_agreementVersion.AgreementNo = field.NewString(tableName, "agreement_no")
	_agreementVersion.Type = field.NewInt32(tableName, "type")
	_agreementVersion.Title = field.NewString(tableName, "title")
	_agreementVersion.Content = field.NewString(tableName, "content")
	_agreementVersion.Version = field.NewString(tableName, "version")
	_agreementVersion.CreatedAt = field.NewString(tableName, "created_at")
	_agreementVersion.DeletedAt = field.NewString(tableName, "deleted_at")

	_agreementVersion.fillFieldMap()

	return _agreementVersion
}

// agreementVersion 协议发布历史表
type agreementVersion struct {
	agreementVersionDo

	ALL         field.Asterisk
	ID          field.Int64
	AgreementNo field.String // 协议编号
	Type        field.Int32  // 协议类型
	Title       field.String // 协议标题
	Content     field.String // 协议内容
	Version     field.String // 协议版本号
	CreatedAt   field.String // 协议发布时间
	DeletedAt   field.String

	fieldMap map[string]field.Expr
}

func (a agreementVersion) Table(newTableName string) *agreementVersion {
	a.agreementVersionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agreementVersion) As(alias string) *agreementVersion {
	a.agreementVersionDo.DO = *(a.agreementVersionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agreementVersion) updateTableName(table string) *agreementVersion {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgreementNo = field.NewString(table, "agreement_no")
	a.Type = field.NewInt32(table, "type")
	a.Title = field.NewString(table, "title")
	a.Content = field.NewString(table, "content")
	a.Version = field.NewString(table, "version")
	a.CreatedAt = field.NewString(table, "created_at")
	a.DeletedAt = field.NewString(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *agreementVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agreementVersion) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agreement_no"] = a.AgreementNo
	a.fieldMap["type"] = a.Type
	a.fieldMap["title"] = a.Title
	a.fieldMap["content"] = a.Content
	a.fieldMap["version"] = a.Version
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a agreementVersion) clone(db *gorm.DB) agreementVersion {
	a.agreementVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agreementVersion) replaceDB(db *gorm.DB) agreementVersion {
	a.agreementVersionDo.ReplaceDB(db)
	return a
}

type agreementVersionDo struct{ gen.DO }

type IAgreementVersionDo interface {
	gen.SubQuery
	Debug() IAgreementVersionDo
	WithContext(ctx context.Context) IAgreementVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgreementVersionDo
	WriteDB() IAgreementVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgreementVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgreementVersionDo
	Not(conds ...gen.Condition) IAgreementVersionDo
	Or(conds ...gen.Condition) IAgreementVersionDo
	Select(conds ...field.Expr) IAgreementVersionDo
	Where(conds ...gen.Condition) IAgreementVersionDo
	Order(conds ...field.Expr) IAgreementVersionDo
	Distinct(cols ...field.Expr) IAgreementVersionDo
	Omit(cols ...field.Expr) IAgreementVersionDo
	Join(table schema.Tabler, on ...field.Expr) IAgreementVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgreementVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgreementVersionDo
	Group(cols ...field.Expr) IAgreementVersionDo
	Having(conds ...gen.Condition) IAgreementVersionDo
	Limit(limit int) IAgreementVersionDo
	Offset(offset int) IAgreementVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgreementVersionDo
	Unscoped() IAgreementVersionDo
	Create(values ...*model.AgreementVersion) error
	CreateInBatches(values []*model.AgreementVersion, batchSize int) error
	Save(values ...*model.AgreementVersion) error
	First() (*model.AgreementVersion, error)
	Take() (*model.AgreementVersion, error)
	Last() (*model.AgreementVersion, error)
	Find() ([]*model.AgreementVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgreementVersion, err error)
	FindInBatches(result *[]*model.AgreementVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgreementVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgreementVersionDo
	Assign(attrs ...field.AssignExpr) IAgreementVersionDo
	Joins(fields ...field.RelationField) IAgreementVersionDo
	Preload(fields ...field.RelationField) IAgreementVersionDo
	FirstOrInit() (*model.AgreementVersion, error)
	FirstOrCreate() (*model.AgreementVersion, error)
	FindByPage(offset int, limit int) (result []*model.AgreementVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgreementVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agreementVersionDo) Debug() IAgreementVersionDo {
	return a.withDO(a.DO.Debug())
}

func (a agreementVersionDo) WithContext(ctx context.Context) IAgreementVersionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agreementVersionDo) ReadDB() IAgreementVersionDo {
	return a.Clauses(dbresolver.Read)
}

func (a agreementVersionDo) WriteDB() IAgreementVersionDo {
	return a.Clauses(dbresolver.Write)
}

func (a agreementVersionDo) Session(config *gorm.Session) IAgreementVersionDo {
	return a.withDO(a.DO.Session(config))
}

func (a agreementVersionDo) Clauses(conds ...clause.Expression) IAgreementVersionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agreementVersionDo) Returning(value interface{}, columns ...string) IAgreementVersionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agreementVersionDo) Not(conds ...gen.Condition) IAgreementVersionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agreementVersionDo) Or(conds ...gen.Condition) IAgreementVersionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agreementVersionDo) Select(conds ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agreementVersionDo) Where(conds ...gen.Condition) IAgreementVersionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agreementVersionDo) Order(conds ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agreementVersionDo) Distinct(cols ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agreementVersionDo) Omit(cols ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agreementVersionDo) Join(table schema.Tabler, on ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agreementVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agreementVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agreementVersionDo) Group(cols ...field.Expr) IAgreementVersionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agreementVersionDo) Having(conds ...gen.Condition) IAgreementVersionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agreementVersionDo) Limit(limit int) IAgreementVersionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agreementVersionDo) Offset(offset int) IAgreementVersionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agreementVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgreementVersionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agreementVersionDo) Unscoped() IAgreementVersionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agreementVersionDo) Create(values ...*model.AgreementVersion) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agreementVersionDo) CreateInBatches(values []*model.AgreementVersion, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agreementVersionDo) Save(values ...*model.AgreementVersion) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agreementVersionDo) First() (*model.AgreementVersion, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgreementVersion), nil
	}
}

func (a agreementVersionDo) Take() (*model.AgreementVersion, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgreementVersion), nil
	}
}

func (a agreementVersionDo) Last() (*model.AgreementVersion, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgreementVersion), nil
	}
}

func (a agreementVersionDo) Find() ([]*model.AgreementVersion, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgreementVersion), err
}

func (a agreementVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgreementVersion, err error) {
	buf := make([]*model.AgreementVersion, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agreementVersionDo) FindInBatches(result *[]*model.AgreementVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agreementVersionDo) Attrs(attrs ...field.AssignExpr) IAgreementVersionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agreementVersionDo) Assign(attrs ...field.AssignExpr) IAgreementVersionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agreementVersionDo) Joins(fields ...field.RelationField) IAgreementVersionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agreementVersionDo) Preload(fields ...field.RelationField) IAgreementVersionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agreementVersionDo) FirstOrInit() (*model.AgreementVersion, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgreementVersion), nil
	}
}

func (a agreementVersionDo) FirstOrCreate() (*model.AgreementVersion, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgreementVersion), nil
	}
}

func (a agreementVersionDo) FindByPage(offset int, limit int) (result []*model.AgreementVersion, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agreementVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agreementVersionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agreementVersionDo) Delete(models ...*model.AgreementVersion) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agreementVersionDo) withDO(do gen.Dao) *agreementVersionDo {
	a.DO = *do.(*gen.DO)
	return a
}
