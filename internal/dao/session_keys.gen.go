// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ogreks/meeseeks-box/internal/model"
)

func newSessionKey(db *gorm.DB, opts ...gen.DOOption) sessionKey {
	_sessionKey := sessionKey{}

	_sessionKey.sessionKeyDo.UseDB(db, opts...)
	_sessionKey.sessionKeyDo.UseModel(&model.SessionKey{})

	tableName := _sessionKey.sessionKeyDo.TableName()
	_sessionKey.ALL = field.NewAsterisk(tableName)
	_sessionKey.ID = field.NewInt64(tableName, "id")
	_sessionKey.SessionNo = field.NewString(tableName, "session_no")
	_sessionKey.Name = field.NewString(tableName, "name")
	_sessionKey.Type = field.NewUint32(tableName, "type")
	_sessionKey.AppID = field.NewString(tableName, "app_id")
	_sessionKey.AppSecret = field.NewString(tableName, "app_secret")
	_sessionKey.IsEnabled = field.NewUint32(tableName, "is_enabled")
	_sessionKey.Remark = field.NewString(tableName, "remark")
	_sessionKey.CreatedAt = field.NewTime(tableName, "created_at")
	_sessionKey.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sessionKey.DeletedAt = field.NewTime(tableName, "deleted_at")

	_sessionKey.fillFieldMap()

	return _sessionKey
}

// sessionKey 交互秘钥表
type sessionKey struct {
	sessionKeyDo

	ALL       field.Asterisk
	ID        field.Int64
	SessionNo field.String // 交互秘钥唯一标识
	Name      field.String // 用途名称
	Type      field.Uint32 // 密钥权限类型 1. 主程API / 2.管理API / 3.服务API
	AppID     field.String // 客户端appid-自动生成
	AppSecret field.String // 客户端秘钥自动生成，加密存储
	IsEnabled field.Uint32 // 是否启用 0.停用 / 1.启用
	Remark    field.String // 备注
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Time

	fieldMap map[string]field.Expr
}

func (s sessionKey) Table(newTableName string) *sessionKey {
	s.sessionKeyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sessionKey) As(alias string) *sessionKey {
	s.sessionKeyDo.DO = *(s.sessionKeyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sessionKey) updateTableName(table string) *sessionKey {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SessionNo = field.NewString(table, "session_no")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewUint32(table, "type")
	s.AppID = field.NewString(table, "app_id")
	s.AppSecret = field.NewString(table, "app_secret")
	s.IsEnabled = field.NewUint32(table, "is_enabled")
	s.Remark = field.NewString(table, "remark")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewTime(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sessionKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sessionKey) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["session_no"] = s.SessionNo
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["app_id"] = s.AppID
	s.fieldMap["app_secret"] = s.AppSecret
	s.fieldMap["is_enabled"] = s.IsEnabled
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sessionKey) clone(db *gorm.DB) sessionKey {
	s.sessionKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sessionKey) replaceDB(db *gorm.DB) sessionKey {
	s.sessionKeyDo.ReplaceDB(db)
	return s
}

type sessionKeyDo struct{ gen.DO }

type ISessionKeyDo interface {
	gen.SubQuery
	Debug() ISessionKeyDo
	WithContext(ctx context.Context) ISessionKeyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISessionKeyDo
	WriteDB() ISessionKeyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISessionKeyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISessionKeyDo
	Not(conds ...gen.Condition) ISessionKeyDo
	Or(conds ...gen.Condition) ISessionKeyDo
	Select(conds ...field.Expr) ISessionKeyDo
	Where(conds ...gen.Condition) ISessionKeyDo
	Order(conds ...field.Expr) ISessionKeyDo
	Distinct(cols ...field.Expr) ISessionKeyDo
	Omit(cols ...field.Expr) ISessionKeyDo
	Join(table schema.Tabler, on ...field.Expr) ISessionKeyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISessionKeyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISessionKeyDo
	Group(cols ...field.Expr) ISessionKeyDo
	Having(conds ...gen.Condition) ISessionKeyDo
	Limit(limit int) ISessionKeyDo
	Offset(offset int) ISessionKeyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionKeyDo
	Unscoped() ISessionKeyDo
	Create(values ...*model.SessionKey) error
	CreateInBatches(values []*model.SessionKey, batchSize int) error
	Save(values ...*model.SessionKey) error
	First() (*model.SessionKey, error)
	Take() (*model.SessionKey, error)
	Last() (*model.SessionKey, error)
	Find() ([]*model.SessionKey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionKey, err error)
	FindInBatches(result *[]*model.SessionKey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SessionKey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISessionKeyDo
	Assign(attrs ...field.AssignExpr) ISessionKeyDo
	Joins(fields ...field.RelationField) ISessionKeyDo
	Preload(fields ...field.RelationField) ISessionKeyDo
	FirstOrInit() (*model.SessionKey, error)
	FirstOrCreate() (*model.SessionKey, error)
	FindByPage(offset int, limit int) (result []*model.SessionKey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISessionKeyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sessionKeyDo) Debug() ISessionKeyDo {
	return s.withDO(s.DO.Debug())
}

func (s sessionKeyDo) WithContext(ctx context.Context) ISessionKeyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sessionKeyDo) ReadDB() ISessionKeyDo {
	return s.Clauses(dbresolver.Read)
}

func (s sessionKeyDo) WriteDB() ISessionKeyDo {
	return s.Clauses(dbresolver.Write)
}

func (s sessionKeyDo) Session(config *gorm.Session) ISessionKeyDo {
	return s.withDO(s.DO.Session(config))
}

func (s sessionKeyDo) Clauses(conds ...clause.Expression) ISessionKeyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sessionKeyDo) Returning(value interface{}, columns ...string) ISessionKeyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sessionKeyDo) Not(conds ...gen.Condition) ISessionKeyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sessionKeyDo) Or(conds ...gen.Condition) ISessionKeyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sessionKeyDo) Select(conds ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sessionKeyDo) Where(conds ...gen.Condition) ISessionKeyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sessionKeyDo) Order(conds ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sessionKeyDo) Distinct(cols ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sessionKeyDo) Omit(cols ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sessionKeyDo) Join(table schema.Tabler, on ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sessionKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sessionKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sessionKeyDo) Group(cols ...field.Expr) ISessionKeyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sessionKeyDo) Having(conds ...gen.Condition) ISessionKeyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sessionKeyDo) Limit(limit int) ISessionKeyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sessionKeyDo) Offset(offset int) ISessionKeyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sessionKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionKeyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sessionKeyDo) Unscoped() ISessionKeyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sessionKeyDo) Create(values ...*model.SessionKey) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sessionKeyDo) CreateInBatches(values []*model.SessionKey, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sessionKeyDo) Save(values ...*model.SessionKey) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sessionKeyDo) First() (*model.SessionKey, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionKey), nil
	}
}

func (s sessionKeyDo) Take() (*model.SessionKey, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionKey), nil
	}
}

func (s sessionKeyDo) Last() (*model.SessionKey, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionKey), nil
	}
}

func (s sessionKeyDo) Find() ([]*model.SessionKey, error) {
	result, err := s.DO.Find()
	return result.([]*model.SessionKey), err
}

func (s sessionKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionKey, err error) {
	buf := make([]*model.SessionKey, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sessionKeyDo) FindInBatches(result *[]*model.SessionKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sessionKeyDo) Attrs(attrs ...field.AssignExpr) ISessionKeyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sessionKeyDo) Assign(attrs ...field.AssignExpr) ISessionKeyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sessionKeyDo) Joins(fields ...field.RelationField) ISessionKeyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sessionKeyDo) Preload(fields ...field.RelationField) ISessionKeyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sessionKeyDo) FirstOrInit() (*model.SessionKey, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionKey), nil
	}
}

func (s sessionKeyDo) FirstOrCreate() (*model.SessionKey, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionKey), nil
	}
}

func (s sessionKeyDo) FindByPage(offset int, limit int) (result []*model.SessionKey, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sessionKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sessionKeyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sessionKeyDo) Delete(models ...*model.SessionKey) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sessionKeyDo) withDO(do gen.Dao) *sessionKeyDo {
	s.DO = *do.(*gen.DO)
	return s
}
