// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ogreks/meeseeks-box/internal/model"
)

func newAgreement(db *gorm.DB, opts ...gen.DOOption) agreement {
	_agreement := agreement{}

	_agreement.agreementDo.UseDB(db, opts...)
	_agreement.agreementDo.UseModel(&model.Agreement{})

	tableName := _agreement.agreementDo.TableName()
	_agreement.ALL = field.NewAsterisk(tableName)
	_agreement.ID = field.NewInt64(tableName, "id")
	_agreement.AgreementNo = field.NewString(tableName, "agreement_no")
	_agreement.Type = field.NewInt32(tableName, "type")
	_agreement.Title = field.NewString(tableName, "title")
	_agreement.Content = field.NewString(tableName, "content")
	_agreement.Status = field.NewUint32(tableName, "status")
	_agreement.Version = field.NewString(tableName, "version")
	_agreement.PublishAt = field.NewTime(tableName, "publish_at")
	_agreement.CreatedAt = field.NewTime(tableName, "created_at")
	_agreement.UpdatedAt = field.NewTime(tableName, "updated_at")
	_agreement.DeletedAt = field.NewTime(tableName, "deleted_at")

	_agreement.fillFieldMap()

	return _agreement
}

// agreement 协议表
type agreement struct {
	agreementDo

	ALL         field.Asterisk
	ID          field.Int64
	AgreementNo field.String // 协议编号
	Type        field.Int32  // 协议类型
	Title       field.String // 协议标题
	Content     field.String // 协议内容
	Status      field.Uint32 // 协议状态 1已发布 2草稿
	Version     field.String // 协议版本号
	PublishAt   field.Time   // 发布时间
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a agreement) Table(newTableName string) *agreement {
	a.agreementDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agreement) As(alias string) *agreement {
	a.agreementDo.DO = *(a.agreementDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agreement) updateTableName(table string) *agreement {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgreementNo = field.NewString(table, "agreement_no")
	a.Type = field.NewInt32(table, "type")
	a.Title = field.NewString(table, "title")
	a.Content = field.NewString(table, "content")
	a.Status = field.NewUint32(table, "status")
	a.Version = field.NewString(table, "version")
	a.PublishAt = field.NewTime(table, "publish_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewTime(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *agreement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agreement) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agreement_no"] = a.AgreementNo
	a.fieldMap["type"] = a.Type
	a.fieldMap["title"] = a.Title
	a.fieldMap["content"] = a.Content
	a.fieldMap["status"] = a.Status
	a.fieldMap["version"] = a.Version
	a.fieldMap["publish_at"] = a.PublishAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a agreement) clone(db *gorm.DB) agreement {
	a.agreementDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agreement) replaceDB(db *gorm.DB) agreement {
	a.agreementDo.ReplaceDB(db)
	return a
}

type agreementDo struct{ gen.DO }

type IAgreementDo interface {
	gen.SubQuery
	Debug() IAgreementDo
	WithContext(ctx context.Context) IAgreementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgreementDo
	WriteDB() IAgreementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgreementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgreementDo
	Not(conds ...gen.Condition) IAgreementDo
	Or(conds ...gen.Condition) IAgreementDo
	Select(conds ...field.Expr) IAgreementDo
	Where(conds ...gen.Condition) IAgreementDo
	Order(conds ...field.Expr) IAgreementDo
	Distinct(cols ...field.Expr) IAgreementDo
	Omit(cols ...field.Expr) IAgreementDo
	Join(table schema.Tabler, on ...field.Expr) IAgreementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgreementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgreementDo
	Group(cols ...field.Expr) IAgreementDo
	Having(conds ...gen.Condition) IAgreementDo
	Limit(limit int) IAgreementDo
	Offset(offset int) IAgreementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgreementDo
	Unscoped() IAgreementDo
	Create(values ...*model.Agreement) error
	CreateInBatches(values []*model.Agreement, batchSize int) error
	Save(values ...*model.Agreement) error
	First() (*model.Agreement, error)
	Take() (*model.Agreement, error)
	Last() (*model.Agreement, error)
	Find() ([]*model.Agreement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Agreement, err error)
	FindInBatches(result *[]*model.Agreement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Agreement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgreementDo
	Assign(attrs ...field.AssignExpr) IAgreementDo
	Joins(fields ...field.RelationField) IAgreementDo
	Preload(fields ...field.RelationField) IAgreementDo
	FirstOrInit() (*model.Agreement, error)
	FirstOrCreate() (*model.Agreement, error)
	FindByPage(offset int, limit int) (result []*model.Agreement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgreementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agreementDo) Debug() IAgreementDo {
	return a.withDO(a.DO.Debug())
}

func (a agreementDo) WithContext(ctx context.Context) IAgreementDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agreementDo) ReadDB() IAgreementDo {
	return a.Clauses(dbresolver.Read)
}

func (a agreementDo) WriteDB() IAgreementDo {
	return a.Clauses(dbresolver.Write)
}

func (a agreementDo) Session(config *gorm.Session) IAgreementDo {
	return a.withDO(a.DO.Session(config))
}

func (a agreementDo) Clauses(conds ...clause.Expression) IAgreementDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agreementDo) Returning(value interface{}, columns ...string) IAgreementDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agreementDo) Not(conds ...gen.Condition) IAgreementDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agreementDo) Or(conds ...gen.Condition) IAgreementDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agreementDo) Select(conds ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agreementDo) Where(conds ...gen.Condition) IAgreementDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agreementDo) Order(conds ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agreementDo) Distinct(cols ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agreementDo) Omit(cols ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agreementDo) Join(table schema.Tabler, on ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agreementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agreementDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agreementDo) Group(cols ...field.Expr) IAgreementDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agreementDo) Having(conds ...gen.Condition) IAgreementDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agreementDo) Limit(limit int) IAgreementDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agreementDo) Offset(offset int) IAgreementDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agreementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgreementDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agreementDo) Unscoped() IAgreementDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agreementDo) Create(values ...*model.Agreement) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agreementDo) CreateInBatches(values []*model.Agreement, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agreementDo) Save(values ...*model.Agreement) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agreementDo) First() (*model.Agreement, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agreement), nil
	}
}

func (a agreementDo) Take() (*model.Agreement, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agreement), nil
	}
}

func (a agreementDo) Last() (*model.Agreement, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agreement), nil
	}
}

func (a agreementDo) Find() ([]*model.Agreement, error) {
	result, err := a.DO.Find()
	return result.([]*model.Agreement), err
}

func (a agreementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Agreement, err error) {
	buf := make([]*model.Agreement, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agreementDo) FindInBatches(result *[]*model.Agreement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agreementDo) Attrs(attrs ...field.AssignExpr) IAgreementDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agreementDo) Assign(attrs ...field.AssignExpr) IAgreementDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agreementDo) Joins(fields ...field.RelationField) IAgreementDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agreementDo) Preload(fields ...field.RelationField) IAgreementDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agreementDo) FirstOrInit() (*model.Agreement, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agreement), nil
	}
}

func (a agreementDo) FirstOrCreate() (*model.Agreement, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Agreement), nil
	}
}

func (a agreementDo) FindByPage(offset int, limit int) (result []*model.Agreement, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agreementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agreementDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agreementDo) Delete(models ...*model.Agreement) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agreementDo) withDO(do gen.Dao) *agreementDo {
	a.DO = *do.(*gen.DO)
	return a
}
