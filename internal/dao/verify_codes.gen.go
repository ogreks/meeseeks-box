// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ogreks/meeseeks-box/internal/model"
)

func newVerifyCode(db *gorm.DB, opts ...gen.DOOption) verifyCode {
	_verifyCode := verifyCode{}

	_verifyCode.verifyCodeDo.UseDB(db, opts...)
	_verifyCode.verifyCodeDo.UseModel(&model.VerifyCode{})

	tableName := _verifyCode.verifyCodeDo.TableName()
	_verifyCode.ALL = field.NewAsterisk(tableName)
	_verifyCode.ID = field.NewUint64(tableName, "id")
	_verifyCode.TemplateID = field.NewUint64(tableName, "template_id")
	_verifyCode.Type = field.NewUint64(tableName, "type")
	_verifyCode.Account = field.NewString(tableName, "account")
	_verifyCode.Code = field.NewString(tableName, "code")
	_verifyCode.IsEnabled = field.NewUint32(tableName, "is_enabled")
	_verifyCode.ExpiredAt = field.NewTime(tableName, "expired_at")
	_verifyCode.CreatedAt = field.NewTime(tableName, "created_at")
	_verifyCode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_verifyCode.DeletedAt = field.NewField(tableName, "deleted_at")

	_verifyCode.fillFieldMap()

	return _verifyCode
}

type verifyCode struct {
	verifyCodeDo

	ALL        field.Asterisk
	ID         field.Uint64
	TemplateID field.Uint64 // 模板编号
	Type       field.Uint64 // 类型:1.邮件 / 2.短信
	Account    field.String // 邮箱或手机，手机号带国际区号，区号无加号
	Code       field.String // 验证码
	IsEnabled  field.Uint32 // 是否有效
	ExpiredAt  field.Time   // 失效时间
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (v verifyCode) Table(newTableName string) *verifyCode {
	v.verifyCodeDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v verifyCode) As(alias string) *verifyCode {
	v.verifyCodeDo.DO = *(v.verifyCodeDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *verifyCode) updateTableName(table string) *verifyCode {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint64(table, "id")
	v.TemplateID = field.NewUint64(table, "template_id")
	v.Type = field.NewUint64(table, "type")
	v.Account = field.NewString(table, "account")
	v.Code = field.NewString(table, "code")
	v.IsEnabled = field.NewUint32(table, "is_enabled")
	v.ExpiredAt = field.NewTime(table, "expired_at")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")

	v.fillFieldMap()

	return v
}

func (v *verifyCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *verifyCode) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 10)
	v.fieldMap["id"] = v.ID
	v.fieldMap["template_id"] = v.TemplateID
	v.fieldMap["type"] = v.Type
	v.fieldMap["account"] = v.Account
	v.fieldMap["code"] = v.Code
	v.fieldMap["is_enabled"] = v.IsEnabled
	v.fieldMap["expired_at"] = v.ExpiredAt
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
}

func (v verifyCode) clone(db *gorm.DB) verifyCode {
	v.verifyCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v verifyCode) replaceDB(db *gorm.DB) verifyCode {
	v.verifyCodeDo.ReplaceDB(db)
	return v
}

type verifyCodeDo struct{ gen.DO }

type IVerifyCodeDo interface {
	gen.SubQuery
	Debug() IVerifyCodeDo
	WithContext(ctx context.Context) IVerifyCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVerifyCodeDo
	WriteDB() IVerifyCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVerifyCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVerifyCodeDo
	Not(conds ...gen.Condition) IVerifyCodeDo
	Or(conds ...gen.Condition) IVerifyCodeDo
	Select(conds ...field.Expr) IVerifyCodeDo
	Where(conds ...gen.Condition) IVerifyCodeDo
	Order(conds ...field.Expr) IVerifyCodeDo
	Distinct(cols ...field.Expr) IVerifyCodeDo
	Omit(cols ...field.Expr) IVerifyCodeDo
	Join(table schema.Tabler, on ...field.Expr) IVerifyCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeDo
	Group(cols ...field.Expr) IVerifyCodeDo
	Having(conds ...gen.Condition) IVerifyCodeDo
	Limit(limit int) IVerifyCodeDo
	Offset(offset int) IVerifyCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVerifyCodeDo
	Unscoped() IVerifyCodeDo
	Create(values ...*model.VerifyCode) error
	CreateInBatches(values []*model.VerifyCode, batchSize int) error
	Save(values ...*model.VerifyCode) error
	First() (*model.VerifyCode, error)
	Take() (*model.VerifyCode, error)
	Last() (*model.VerifyCode, error)
	Find() ([]*model.VerifyCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VerifyCode, err error)
	FindInBatches(result *[]*model.VerifyCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VerifyCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVerifyCodeDo
	Assign(attrs ...field.AssignExpr) IVerifyCodeDo
	Joins(fields ...field.RelationField) IVerifyCodeDo
	Preload(fields ...field.RelationField) IVerifyCodeDo
	FirstOrInit() (*model.VerifyCode, error)
	FirstOrCreate() (*model.VerifyCode, error)
	FindByPage(offset int, limit int) (result []*model.VerifyCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVerifyCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v verifyCodeDo) Debug() IVerifyCodeDo {
	return v.withDO(v.DO.Debug())
}

func (v verifyCodeDo) WithContext(ctx context.Context) IVerifyCodeDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v verifyCodeDo) ReadDB() IVerifyCodeDo {
	return v.Clauses(dbresolver.Read)
}

func (v verifyCodeDo) WriteDB() IVerifyCodeDo {
	return v.Clauses(dbresolver.Write)
}

func (v verifyCodeDo) Session(config *gorm.Session) IVerifyCodeDo {
	return v.withDO(v.DO.Session(config))
}

func (v verifyCodeDo) Clauses(conds ...clause.Expression) IVerifyCodeDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v verifyCodeDo) Returning(value interface{}, columns ...string) IVerifyCodeDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v verifyCodeDo) Not(conds ...gen.Condition) IVerifyCodeDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v verifyCodeDo) Or(conds ...gen.Condition) IVerifyCodeDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v verifyCodeDo) Select(conds ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v verifyCodeDo) Where(conds ...gen.Condition) IVerifyCodeDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v verifyCodeDo) Order(conds ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v verifyCodeDo) Distinct(cols ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v verifyCodeDo) Omit(cols ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v verifyCodeDo) Join(table schema.Tabler, on ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v verifyCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v verifyCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v verifyCodeDo) Group(cols ...field.Expr) IVerifyCodeDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v verifyCodeDo) Having(conds ...gen.Condition) IVerifyCodeDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v verifyCodeDo) Limit(limit int) IVerifyCodeDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v verifyCodeDo) Offset(offset int) IVerifyCodeDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v verifyCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVerifyCodeDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v verifyCodeDo) Unscoped() IVerifyCodeDo {
	return v.withDO(v.DO.Unscoped())
}

func (v verifyCodeDo) Create(values ...*model.VerifyCode) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v verifyCodeDo) CreateInBatches(values []*model.VerifyCode, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v verifyCodeDo) Save(values ...*model.VerifyCode) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v verifyCodeDo) First() (*model.VerifyCode, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCode), nil
	}
}

func (v verifyCodeDo) Take() (*model.VerifyCode, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCode), nil
	}
}

func (v verifyCodeDo) Last() (*model.VerifyCode, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCode), nil
	}
}

func (v verifyCodeDo) Find() ([]*model.VerifyCode, error) {
	result, err := v.DO.Find()
	return result.([]*model.VerifyCode), err
}

func (v verifyCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VerifyCode, err error) {
	buf := make([]*model.VerifyCode, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v verifyCodeDo) FindInBatches(result *[]*model.VerifyCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v verifyCodeDo) Attrs(attrs ...field.AssignExpr) IVerifyCodeDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v verifyCodeDo) Assign(attrs ...field.AssignExpr) IVerifyCodeDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v verifyCodeDo) Joins(fields ...field.RelationField) IVerifyCodeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v verifyCodeDo) Preload(fields ...field.RelationField) IVerifyCodeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v verifyCodeDo) FirstOrInit() (*model.VerifyCode, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCode), nil
	}
}

func (v verifyCodeDo) FirstOrCreate() (*model.VerifyCode, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerifyCode), nil
	}
}

func (v verifyCodeDo) FindByPage(offset int, limit int) (result []*model.VerifyCode, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v verifyCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v verifyCodeDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v verifyCodeDo) Delete(models ...*model.VerifyCode) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *verifyCodeDo) withDO(do gen.Dao) *verifyCodeDo {
	v.DO = *do.(*gen.DO)
	return v
}
