// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ogreks/meeseeks-box/internal/model"
)

func newAccountConnect(db *gorm.DB, opts ...gen.DOOption) accountConnect {
	_accountConnect := accountConnect{}

	_accountConnect.accountConnectDo.UseDB(db, opts...)
	_accountConnect.accountConnectDo.UseModel(&model.AccountConnect{})

	tableName := _accountConnect.accountConnectDo.TableName()
	_accountConnect.ALL = field.NewAsterisk(tableName)
	_accountConnect.ID = field.NewUint64(tableName, "id")
	_accountConnect.AccountID = field.NewUint64(tableName, "account_id")
	_accountConnect.ConnectPlatformID = field.NewUint32(tableName, "connect_platform_id")
	_accountConnect.ConnectAccountID = field.NewString(tableName, "connect_account_id")
	_accountConnect.ConnectToken = field.NewString(tableName, "connect_token")
	_accountConnect.ConnectRefreshToken = field.NewString(tableName, "connect_refresh_token")
	_accountConnect.ConnectUserName = field.NewString(tableName, "connect_user_name")
	_accountConnect.ConnectNickName = field.NewString(tableName, "connect_nick_name")
	_accountConnect.IsEnabled = field.NewUint32(tableName, "is_enabled")
	_accountConnect.MoreJSON = field.NewString(tableName, "more_json")
	_accountConnect.RefreshTokenExpireAt = field.NewTime(tableName, "refresh_token_expire_at")
	_accountConnect.CreatedAt = field.NewTime(tableName, "created_at")
	_accountConnect.UpdatedAt = field.NewTime(tableName, "updated_at")
	_accountConnect.DeletedAt = field.NewTime(tableName, "deleted_at")

	_accountConnect.fillFieldMap()

	return _accountConnect
}

type accountConnect struct {
	accountConnectDo

	ALL                  field.Asterisk
	ID                   field.Uint64
	AccountID            field.Uint64 // 账号主键ID
	ConnectPlatformID    field.Uint32 // 连接平台ID
	ConnectAccountID     field.String // 关联账号ID唯一值例如：微信openid或GitHubID
	ConnectToken         field.String
	ConnectRefreshToken  field.String
	ConnectUserName      field.String // 关联用户名
	ConnectNickName      field.String // 关联昵称
	IsEnabled            field.Uint32 // 是否有效0.无效/1.有效
	MoreJSON             field.String // 扩展字段
	RefreshTokenExpireAt field.Time   // 授权RefreshToken有效期
	CreatedAt            field.Time   // 创建时间
	UpdatedAt            field.Time   // 更新时间
	DeletedAt            field.Time   // 删除时间

	fieldMap map[string]field.Expr
}

func (a accountConnect) Table(newTableName string) *accountConnect {
	a.accountConnectDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountConnect) As(alias string) *accountConnect {
	a.accountConnectDo.DO = *(a.accountConnectDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountConnect) updateTableName(table string) *accountConnect {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint64(table, "id")
	a.AccountID = field.NewUint64(table, "account_id")
	a.ConnectPlatformID = field.NewUint32(table, "connect_platform_id")
	a.ConnectAccountID = field.NewString(table, "connect_account_id")
	a.ConnectToken = field.NewString(table, "connect_token")
	a.ConnectRefreshToken = field.NewString(table, "connect_refresh_token")
	a.ConnectUserName = field.NewString(table, "connect_user_name")
	a.ConnectNickName = field.NewString(table, "connect_nick_name")
	a.IsEnabled = field.NewUint32(table, "is_enabled")
	a.MoreJSON = field.NewString(table, "more_json")
	a.RefreshTokenExpireAt = field.NewTime(table, "refresh_token_expire_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewTime(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *accountConnect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountConnect) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["account_id"] = a.AccountID
	a.fieldMap["connect_platform_id"] = a.ConnectPlatformID
	a.fieldMap["connect_account_id"] = a.ConnectAccountID
	a.fieldMap["connect_token"] = a.ConnectToken
	a.fieldMap["connect_refresh_token"] = a.ConnectRefreshToken
	a.fieldMap["connect_user_name"] = a.ConnectUserName
	a.fieldMap["connect_nick_name"] = a.ConnectNickName
	a.fieldMap["is_enabled"] = a.IsEnabled
	a.fieldMap["more_json"] = a.MoreJSON
	a.fieldMap["refresh_token_expire_at"] = a.RefreshTokenExpireAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a accountConnect) clone(db *gorm.DB) accountConnect {
	a.accountConnectDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountConnect) replaceDB(db *gorm.DB) accountConnect {
	a.accountConnectDo.ReplaceDB(db)
	return a
}

type accountConnectDo struct{ gen.DO }

type IAccountConnectDo interface {
	gen.SubQuery
	Debug() IAccountConnectDo
	WithContext(ctx context.Context) IAccountConnectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountConnectDo
	WriteDB() IAccountConnectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountConnectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountConnectDo
	Not(conds ...gen.Condition) IAccountConnectDo
	Or(conds ...gen.Condition) IAccountConnectDo
	Select(conds ...field.Expr) IAccountConnectDo
	Where(conds ...gen.Condition) IAccountConnectDo
	Order(conds ...field.Expr) IAccountConnectDo
	Distinct(cols ...field.Expr) IAccountConnectDo
	Omit(cols ...field.Expr) IAccountConnectDo
	Join(table schema.Tabler, on ...field.Expr) IAccountConnectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountConnectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountConnectDo
	Group(cols ...field.Expr) IAccountConnectDo
	Having(conds ...gen.Condition) IAccountConnectDo
	Limit(limit int) IAccountConnectDo
	Offset(offset int) IAccountConnectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountConnectDo
	Unscoped() IAccountConnectDo
	Create(values ...*model.AccountConnect) error
	CreateInBatches(values []*model.AccountConnect, batchSize int) error
	Save(values ...*model.AccountConnect) error
	First() (*model.AccountConnect, error)
	Take() (*model.AccountConnect, error)
	Last() (*model.AccountConnect, error)
	Find() ([]*model.AccountConnect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountConnect, err error)
	FindInBatches(result *[]*model.AccountConnect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AccountConnect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountConnectDo
	Assign(attrs ...field.AssignExpr) IAccountConnectDo
	Joins(fields ...field.RelationField) IAccountConnectDo
	Preload(fields ...field.RelationField) IAccountConnectDo
	FirstOrInit() (*model.AccountConnect, error)
	FirstOrCreate() (*model.AccountConnect, error)
	FindByPage(offset int, limit int) (result []*model.AccountConnect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountConnectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a accountConnectDo) Debug() IAccountConnectDo {
	return a.withDO(a.DO.Debug())
}

func (a accountConnectDo) WithContext(ctx context.Context) IAccountConnectDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountConnectDo) ReadDB() IAccountConnectDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountConnectDo) WriteDB() IAccountConnectDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountConnectDo) Session(config *gorm.Session) IAccountConnectDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountConnectDo) Clauses(conds ...clause.Expression) IAccountConnectDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountConnectDo) Returning(value interface{}, columns ...string) IAccountConnectDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountConnectDo) Not(conds ...gen.Condition) IAccountConnectDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountConnectDo) Or(conds ...gen.Condition) IAccountConnectDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountConnectDo) Select(conds ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountConnectDo) Where(conds ...gen.Condition) IAccountConnectDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountConnectDo) Order(conds ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountConnectDo) Distinct(cols ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountConnectDo) Omit(cols ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountConnectDo) Join(table schema.Tabler, on ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountConnectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountConnectDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountConnectDo) Group(cols ...field.Expr) IAccountConnectDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountConnectDo) Having(conds ...gen.Condition) IAccountConnectDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountConnectDo) Limit(limit int) IAccountConnectDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountConnectDo) Offset(offset int) IAccountConnectDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountConnectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountConnectDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountConnectDo) Unscoped() IAccountConnectDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountConnectDo) Create(values ...*model.AccountConnect) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountConnectDo) CreateInBatches(values []*model.AccountConnect, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountConnectDo) Save(values ...*model.AccountConnect) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountConnectDo) First() (*model.AccountConnect, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountConnect), nil
	}
}

func (a accountConnectDo) Take() (*model.AccountConnect, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountConnect), nil
	}
}

func (a accountConnectDo) Last() (*model.AccountConnect, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountConnect), nil
	}
}

func (a accountConnectDo) Find() ([]*model.AccountConnect, error) {
	result, err := a.DO.Find()
	return result.([]*model.AccountConnect), err
}

func (a accountConnectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountConnect, err error) {
	buf := make([]*model.AccountConnect, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountConnectDo) FindInBatches(result *[]*model.AccountConnect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountConnectDo) Attrs(attrs ...field.AssignExpr) IAccountConnectDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountConnectDo) Assign(attrs ...field.AssignExpr) IAccountConnectDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountConnectDo) Joins(fields ...field.RelationField) IAccountConnectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountConnectDo) Preload(fields ...field.RelationField) IAccountConnectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountConnectDo) FirstOrInit() (*model.AccountConnect, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountConnect), nil
	}
}

func (a accountConnectDo) FirstOrCreate() (*model.AccountConnect, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountConnect), nil
	}
}

func (a accountConnectDo) FindByPage(offset int, limit int) (result []*model.AccountConnect, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountConnectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountConnectDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountConnectDo) Delete(models ...*model.AccountConnect) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountConnectDo) withDO(do gen.Dao) *accountConnectDo {
	a.DO = *do.(*gen.DO)
	return a
}
